{"version":3,"file":"static/js/205.3c87db9f.chunk.js","mappings":"8KAIA,MAyEA,EAzEoBA,KAElB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAErDC,EAAAA,EAAAA,YAAU,IACF,QACN,IAEF,MAAMC,GAASC,EAAAA,EAAAA,cAAaC,IAE1BL,GAAkBM,GAAc,IAAIA,KAAcD,IAAe,GAChE,KAEK,aAAEE,EAAY,cAAEC,EAAa,aAAEC,IAAiBC,EAAAA,EAAAA,IAAY,CAChEP,SAKAQ,QAAS,QACTC,UAAU,IAGZ,OACEC,EAAAA,EAAAA,KAAA,OAAKC,GAAG,cAAaC,UACrBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMF,SAAA,EACjBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,oFAAmFF,UAC9FF,EAAAA,EAAAA,KAAA,MAAII,UAAU,mBAAkBF,SAAC,kBAErCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWF,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,yBAAwBF,UACnCC,EAAAA,EAAAA,MAAA,UACQT,IACJU,UAAW,0BAAyBR,EAAe,cAAgB,IAAKM,SAAA,EAExEF,EAAAA,EAAAA,KAAA,YAAWL,OACXK,EAAAA,EAAAA,KAAA,OAAKI,UAAU,wBAAuBF,UAClCF,EAAAA,EAAAA,KAACK,EAAAA,IAAQ,CAACC,MAAO,CAAEC,SAAU,SAEjCP,EAAAA,EAAAA,KAAA,OAAKI,UAAU,yBAAwBF,UACnCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBF,SAAA,EACnCC,EAAAA,EAAAA,MAAA,SAAOC,UAAU,qBAAoBF,SAAA,EACjCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,sBAAsB,kBAEtCR,GACGI,EAAAA,EAAAA,KAAA,KAAAE,SAAG,6BAEHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,yEAIfF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,kBAAiBF,SAAC,6DAMtChB,EAAcsB,OAAS,IACpBL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBF,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,qBACJF,EAAAA,EAAAA,KAAA,MAAAE,SACKhB,EAAcuB,KAAI,CAACC,EAAMC,KACtBX,EAAAA,EAAAA,KAAA,MAAAE,SAAiBQ,EAAKE,MAAbD,iBAO/B,C","sources":["feature-module/crm/customers/Attachments.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport { FcUpload } from 'react-icons/fc';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\nconst Attachments = () => {\r\n\r\n  const [uploadedFiles, setUploadedFiles] = useState([]);\r\n\r\nuseEffect(()=>{\r\n  return()=>{}\r\n},[])\r\n\r\nconst onDrop = useCallback((acceptedFiles) => {\r\n  // Handle the uploaded files here\r\n  setUploadedFiles((prevFiles) => [...prevFiles, ...acceptedFiles]);\r\n}, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    // accept: {\r\n    //   \"text/csv\": ['.csv'],\r\n    //   \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": ['.xlsx']\r\n    // },\r\n    maxSize: 5242880, // 5MB max file size\r\n    multiple: true\r\n});\r\n\r\n  return (\r\n    <div id=\"attachments\">\r\n    <div className=\"card\">\r\n        <div className=\"card-header d-flex align-items-center justify-content-between flex-wrap row-gap-3\">\r\n            <h4 className=\"fw-semibold mb-0\">Attachment</h4>\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <div className=\"uploadSectionContainer\">\r\n                <div\r\n                    {...getRootProps()}\r\n                    className={`uploadSectionInnerBox ${isDragActive ? \"drag-active\" : \"\"}`}\r\n                >\r\n                    <input {...getInputProps()} />\r\n                    <div className=\"uploadSectionImageBox\">\r\n                        <FcUpload style={{ fontSize: 30 }} />\r\n                    </div>\r\n                    <div className=\"profile-upload d-block\">\r\n                        <div className=\"profile-upload-content\">\r\n                            <label className=\"profile-upload-btn\">\r\n                                <i className=\"ti ti-file-broken\" /> Upload File\r\n                            </label>\r\n                            {isDragActive ? (\r\n                                <p>Drop the files here ...</p>\r\n                            ) : (\r\n                                <p>Drag 'n' drop Excel or CSV files here, or click to select them</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <p className=\"supportedFormat\">\r\n                        (Supported formats .csv, .xlsx; max file size 5 MB)\r\n                    </p>\r\n\r\n                </div>\r\n            </div>\r\n            {uploadedFiles.length > 0 && (\r\n                <div className=\"uploaded-files\">\r\n                    <h4>Uploaded Files:</h4>\r\n                    <ul>\r\n                        {uploadedFiles.map((file, index) => (\r\n                            <li key={index}>{file.name}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Attachments"],"names":["Attachments","uploadedFiles","setUploadedFiles","useState","useEffect","onDrop","useCallback","acceptedFiles","prevFiles","getRootProps","getInputProps","isDragActive","useDropzone","maxSize","multiple","_jsx","id","children","_jsxs","className","FcUpload","style","fontSize","length","map","file","index","name"],"sourceRoot":""}